#!/usr/bin/env python2

"""
Usage: server.py

Options:

Example:

  ./ec3k-listen | grep is_on | tee -a ec3k.json | ./ha-feeder

"""

from sys import version_info, stdout, stderr

if version_info > (3, 0):
    print("Python 3 not supported by GNU Radio :-(")

from time import sleep
from datetime import datetime, timedelta
from SocketServer import ThreadingTCPServer, StreamRequestHandler
from json import dumps as to_json
import logging
import ec3k

FREQUENCY=868.200 * 1e6

LOGFMT="%(asctime)s %(levelname)5s (%(threadName)s) [%(name)s]  %(message)s"
DATEFMT = "%y-%m-%d %H:%M.%S"
LOG_LEVEL = logging.INFO
_LOGGER = logging.getLogger(__name__)

try:
    import coloredlogs
    coloredlogs.install(level=LOG_LEVEL)
except:
    _LOGGER.debug("no color log")
	
logging.basicConfig(level=LOG_LEVEL,
                    stream=stderr,
                    datefmt=DATEFMT,
                    format=LOGFMT)

def callback(state):
    state.id = "%04x" % state.id
    print(to_json(dict(id=state.id,
                       time=datetime.utcnow().replace(microsecond=0).isoformat(),
                       is_on=state.device_on_flag,
                       energy=state.energy,
                       power=state.power_current,
                       power_max=state.power_max,
                       time_on=state.time_on,
                       time_total=state.time_total)))
    try:
        stdout.flush()
    except IOError:
        # broken pipe
        pass
        

def scan():
    receiver = ec3k.EnergyCount3K(callback=callback,
                                  freq=FREQUENCY)
    receiver._log = _LOGGER.debug
    _LOGGER.info("Starting ec3k")
    receiver.start()
    try:
        # ec3k seems to die and stop sending
        # callbacks after a while, lets's restart
        # once every 6 hours
        DELAY = timedelta(hours=6)
        _LOGGER.info("Waiting %s", DELAY)
        sleep(DELAY.seconds)
        _LOGGER.info("Waking up")
        return True
    except KeyboardInterrupt:
        _LOGGER.info("Interrupted")
        return False
    finally:
        try:
            _LOGGER.info("Stopping ec3k")
            receiver.stop()
        except KeyboardInterrupt:
            return False


if __name__ == '__main__':    
    while scan():
        _LOGGER.info("Restarting")
        pass

    
